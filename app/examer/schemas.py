from bs4 import BeautifulSoup


class Task:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –∑–∞–¥–∞–Ω–∏–µ

    :field id: str - ID –∑–∞–¥–∞–Ω–∏—è
    :field question: str - —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    :field difficult: int - –±–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ (1, 2 –∏–ª–∏ 3)
    :field avg_time: float - –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    :field answer: str - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    """

    def __init__(self, task_dict: dict[str, str]):
        self.id: str = task_dict.get("id")
        self.question: str = self.__remove_tags(task_dict["task_text"])
        self.difficult: int = self.__convert_dif(task_dict["difficult"])
        self.avg_time: float = float(task_dict["avg_time"])
        self.answer = "No answer"

    @staticmethod
    def __remove_tags(text: str) -> str:
        soup = BeautifulSoup(text, "html.parser")
        return soup.text

    @staticmethod
    def __convert_dif(grade: str) -> int:
        if grade == "easy":
            return 1
        elif grade == "normal":
            return 2
        else:
            return 3

    @property
    def formatted_question(self) -> str:
        return (
            f"{'üåö' * self.difficult}\n```\n{self.question}\n```\n\n" f"–û—Ç–≤–µ—Ç: `{self.answer}`"
        )


class ExamerTest:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è —Ç–µ—Å—Ç

    :field theme: str - —Ç–µ–º–∞ —Ç–µ—Å—Ç–∞
    :field score: str - –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Ç–µ—Å—Ç
    :field tasks: Dist[str, Task] - —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞–Ω–∏–π –≤–∏–¥–∞ ("task_id": Task)
    :field avg_time: int - –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    """

    def __init__(self, test_dict: dict):
        self.theme: str = test_dict["title"]
        self.scenarioId: int = test_dict["scenarioId"]
        self.scenario: int = test_dict["scenario"]
        self.sid: int = test_dict["subject"]["id"]
        self.score: str = str(test_dict["score"])
        self.tasks: dict[str, Task] = {}
        self.avg_time = 0
        for task in test_dict["tasks"]:
            t = Task(task)
            self.tasks[t.id] = t
            self.avg_time += t.avg_time
        self.unprocessed_tasks_id: list[str] = list(self.tasks.keys())

        self.avg_time = round(self.avg_time / 30)

    def get_tasks(self) -> list[Task]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        :return: List[Task]
        """
        return list(self.tasks.values())
