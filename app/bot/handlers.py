import loguru
from aiogram import Dispatcher, types
from aiogram.filters import Command

from app.bot.bot import bot
from app.examer.controller import controller

dp = Dispatcher()


@dp.message()
async def message_handler(message: types.Message) -> None:
    try:
        loguru.logger.info(f"{message.text} from {message.from_user.id}")  # type: ignore
        if message.text is None:
            return

        if "examer.ru" not in message.text or not message.text.startswith("http"):
            await bot.send_message(chat_id=message.from_user.id, text="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞")  # type: ignore
            return

        if not await controller.check_auth():
            await controller.auth()

        await bot.send_message(chat_id=message.from_user.id, text="–ò—â—É –æ—Ç–≤–µ—Ç—ã....")  # type: ignore

        test = await controller.process_link(message.text)

        await bot.send_message(
            chat_id=message.from_user.id,
            text=(
                f"–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {test.score}\n"
                "üåö - —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ\n"
                f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {test.avg_time} –º–∏–Ω—É—Ç"
            ),
        )  # type: ignore

        for task in test.get_tasks():
            await bot.send_message(chat_id=message.from_user.id, text=task.formatted_question)  # type: ignore

    except Exception as e:
        loguru.logger.opt(exception=e).error("Error processing message")
        await bot.send_message(chat_id=message.from_user.id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ì–ª—è–Ω—å—Ç–µ –ª–æ–≥–∏")  # type: ignore


@dp.message(Command("start"))
async def start_handler(message: types.Message) -> None:
    await bot.send_message(
        chat_id=message.from_user.id, text="–°–∫–∏–¥—ã–≤–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ examer"
    )
